//计数排序
//思想：1.在原数组中找出最大值和最小值；2.开辟计数数组count，范围是max-min+1；
//3.count数组下标是原数组中的元素值，count数组每个下标对应的值是原数组中此数出现的次数；
//4.把count数组中的值对应输出到原数组中
void CountSort(vector<int>& a, int size)
{
	int min = a[0];
	int max = a[0];
	for (int i = 0; i < size; i++)
	{
		if (a[i] < min)
			min = a[i];
		if (a[i] > max)
			max = a[i];
	}
	int range = max - min + 1;
	vector<int> count(0);
	count.resize(range);
	//遍历原数组，把对应的值存进count数组
	for (int i = 0; i < size; ++i)
	{
		//存进去的值每次都减去最小的值，保证可以在range范围内存下每个值
		count[a[i] - min]++;
	}
	//遍历count数组，把count中的数拷回原数组
	int j = 0;
	for (int i = 0; i < range; i++)
	{
		while (count[i]--)
		{
			//存到count数组时每个值都减了最小值，所以在这要加上
			a[j++] = i + min;
		}
	}
}
//归并排序
//思想：1.分解数组直到每个区间只有一个值；2.合并数组到新开辟的数组中；3.把新数组中的值拷贝到原来的数组中
void MergeSort(vector<int>&a, vector<int>& tmp, int begin, int end)
{
	if (begin >= end)
	{
		//return之后会退回上一层，begin和end的值都会退回上一层
		return;
	}
	int mid = begin + ((end - begin) >> 1);
	MergeSort(a, tmp, begin, mid);
	MergeSort(a, tmp, mid + 1, end);
	//合并
	int begin1 = begin, end1 = mid;
	int begin2 = mid + 1, end2 = end;
	int index = 0;
	//每次递归结束[begin1, end1]和[begin2, end2]区间上都只有一个值
	while (begin1 <= end1 && begin2 <= end2)
	{
		if (a[begin1] < a[begin2])
		{
			tmp[index++] = a[begin1++];
		}
		else
		{
			tmp[index++] = a[begin2++];
		}
	}
	//若a[begin1]更大一些，则插进去的是a[begin2]，需要把a[begin1]的值插入
	while (begin1 <= end1)
	{
		tmp[index++] = a[begin1++];
	}
	//若a[begin2]更大一些，则插进去的是a[begin1]，需要把a[begin2]的值插入
	while (begin2 <= end2)
	{
		tmp[index++] = a[begin2++];
	}
	//把tmp数组中的值拷贝到原数组中
	for (int i = 0; i < index; i++)
	{
		a[i + begin] = tmp[i];
	}
}
