//直接选择排序
void SelectSort(vector<int>& a, int n)
{
	int begin = 0;
	int end = n - 1;
	int i = 0;
	while (begin < end)
	{
		int min = begin;
		int max = end;
		//循环找出区间[begin, end]上的最大值和最小值下标
		for (int i = begin; i <= end; i++)
		{
			if (a[i] > a[max])
				max = i;
			if (a[i] < a[min])
				min = i;
		}
		//把最小值放在每个区间的最开始，最大值放在每个区间的结束
		swap(a[begin], a[min]);
		swap(a[end], a[max]);
		//区间一直在往中间缩小，直到区间上剩一个值
		begin++;
		end--;
	}
}

//堆排
//1.向下调整算法建堆（升序建大堆，降序建小堆） 2.排序
void AdjustDown(vector<int>& a, int n, int parents)
{
	int child = parents * 2 + 1;
	while (child < n)
	{
		//先找出左右孩子大的
		if (child + 1 < n && a[child] < a[child + 1])
		{
			child++;
		}
		if (a[child] > a[parents])
		{
			swap(a[child], a[parents]);
			//下次调整再从新的parents位置开始调整为大堆
			parents = child;
			child = parents * 2 + 1;
		}
		//child的值都比parents小，则目前不用调整此子树
		else
			break;
	}
}
//排序
void HeapSort(vector<int>& a, int n)
{
	//建堆
	for (int i = (n - 2) / 2; i >= 0; i--)
	{
		AdjustDown(a, n, i);
	}
	//排序
	int end = n - 1;
	while (end > 0)
	{
		swap(a[0], a[end]);
		AdjustDown(a, end, 0);
		end--;
	}
}
